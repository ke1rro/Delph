# Available ports:

# 8000 - entry point (nginx)
# 8001 - frontend service
# 8002 - core service
# 8003 - bridge service
# 8004 - history service

# 27017 - history-db
# 6380 - redis
# 5433 - core db

services:

  history-db:
    image: mongo:latest
    container_name: history-db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB_NAME}
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ./data/history-db:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017 --quiet
      interval: 25s
      retries: 1
      start_period: 5s
    labels:
      com.datadoghq.ad.logs: '[{"source": "history-db", "service": "history-db"}]'

  history:
    build:
      dockerfile: history/Dockerfile.service
    container_name: history
    env_file:
      - .env

    ports:
      - "8004:80"
    volumes:
      - ./certificates:/certificates
      - ./logging.ini:/config/logging.ini
    depends_on:
      history-db:
        condition: service_healthy
    labels:
      com.datadoghq.ad.logs: '[{"source": "history", "service": "history"}]'

  history-adapter:
    build:
      dockerfile: history/Dockerfile.adapter
    container_name: history-adapter
    env_file:
      - .env
    volumes:
      - ./logging.ini:/config/logging.ini
    depends_on:
      history-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    labels:
      com.datadoghq.ad.logs: '[{"source": "history-adapter", "service": "history-adapter"}]'

  redis:
    build: redis
    container_name: redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6380:6379"
    volumes:
      - ./data/redis:/data
    restart: always
    command: ["redis-server", "--requirepass", "$REDIS_PASSWORD"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 5s
      retries: 5
      start_period: 10s
    labels:
      com.datadoghq.ad.logs: '[{"source": "redis", "service": "redis"}]'

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    labels:
      com.datadoghq.ad.logs: '[{"source": "zookeeper", "service": "zookeeper"}]'

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 5s
      retries: 5
      start_period: 10s
    labels:
      com.datadoghq.ad.logs: '[{"source": "kafka", "service": "kafka"}]'

  core-db:
    image: postgres:latest
    container_name: core-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - ./data/core-db:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      retries: 5
      start_period: 10s
    labels:
      com.datadoghq.ad.logs: '[{"source": "core-db", "service": "core-db"}]'

  core:
    build:
      dockerfile: api/Dockerfile
    container_name: core
    env_file:
      - .env
    restart: always
    ports:
      - "8002:80"
    volumes:
      - ./certificates:/certificates
      - ./logging.ini:/config/logging.ini
    depends_on:
      core-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      com.datadoghq.ad.logs: '[{"source": "core", "service": "core"}]'

  frontend:
    container_name: frontend
    build: frontend
    ports:
      - "8001:80"
    labels:
      com.datadoghq.ad.logs: '[{"source": "frontend", "service": "frontend"}]'

  bridge:
    build:
      dockerfile: bridge/Dockerfile
    container_name: bridge
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    volumes:
      - ./certificates:/certificates
      - ./logging.ini:/config/logging.ini
    ports:
      - 8003:80
    labels:
      com.datadoghq.ad.logs: '[{"source": "bridge", "service": "bridge"}]'

  nginx:
    build: server
    container_name: nginx
    restart: always
    ports:
      - "8000:80"
    depends_on:
      - core
      - bridge
      - frontend
    labels:
      com.datadoghq.ad.logs: '[{"source": "nginx", "service": "nginx"}]'

  datadog:
    image: datadog/agent:latest
    container_name: dd-agent
    environment:
     - DD_API_KEY=${DATADOG_API_KEY}
     - DD_AGENT_HOST=dd-agent
     - DD_SITE=us5.datadoghq.com
     - DD_CONTAINER_EXCLUDE=name:dd-agent
     - DD_LOGS_ENABLED=true
     - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=false
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
     - /proc/:/host/proc/:ro
     - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
     - /var/lib/docker/containers:/var/lib/docker/containers:ro
