# Available ports:

# 8000 - entry point (nginx)
# 8001 - frontend service
# 8002 - core service
# 8003 - bridge service
# 8004 - history service

# 27017 - history-db
# 6380 - redis
# 5433 - core db

services:

  history-db:
    image: mongo:latest
    container_name: history-db
    env_file:
      - .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB_NAME}
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ./data/mongo:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017 --quiet
      interval: 25s
      retries: 1
      start_period: 5s

  # MongoDB для history
  mongo-history:
    image: mongo:latest
    container_name: mongo-history
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB_NAME}
    restart: always
    ports:
      - "27018:27017" # Уникаємо конфлікту з основним MongoDB
    volumes:
      - ./data/mongo-history:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017 --quiet
      interval: 25s
      retries: 1
      start_period: 5s

  # Kafka для history
  zookeeper-history:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-history
    environment:
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 2000

  kafka-history:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-history
    depends_on:
      - zookeeper-history
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-history:2182
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-history:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9093:9092" # Уникаємо конфлікту з основною Kafka
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9093", "--list"]
      interval: 5s
      retries: 5
      start_period: 10s

  history:
    build:
      dockerfile: history/Dockerfile
    container_name: history
    env_file:
      - .env
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
      MONGO_PORT: ${MONGO_HISTORY_PORT}
    ports:
      - "8004:80"
    depends_on:
      mongo-history:
        condition: service_healthy
      kafka-history:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      retries: 3
      start_period: 10s

  redis:
    build: redis
    container_name: redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6380:6379"
    volumes:
      - ./data/redis:/data
    restart: always
    command: ["redis-server", "--requirepass", "$REDIS_PASSWORD"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 5s
      retries: 5
      start_period: 10s

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 5s
      retries: 5
      start_period: 10s

  core-db:
    image: postgres:latest
    container_name: core-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - ./data/core-db:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      retries: 5
      start_period: 10s

  core:
    build:
      dockerfile: api/Dockerfile
    container_name: core
    env_file:
      - .env
    restart: always
    ports:
      - "8002:80"
    depends_on:
      core-db:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    container_name: frontend
    build: frontend
    ports:
      - "8001:80"

  bridge:
    build:
      dockerfile: bridge/Dockerfile
    container_name: bridge
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    ports:
      - 8003:80

  nginx:
    build: server
    container_name: nginx
    restart: always
    ports:
      - "8000:80"
    depends_on:
      - core
      - bridge
      - frontend
