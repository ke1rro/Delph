"""User repository module."""

import logging
import uuid

from db.models import User
from schemas.user import UserReg
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import validates
from utils.utils import hash_password

logging.basicConfig(
    level=logging.INFO, filename="app.log", format="%(asctime)s - %(message)s"
)


class UserRepository:
    """User repository class, which contains methods for user data manipulation."""

    def __init__(self, session: AsyncSession):
        """Initialize user repository with a database session."""
        self.session = session

    @validates("users_id")
    def validate_user_id(self, value: uuid.UUID) -> uuid.UUID | ValueError:
        """
        Checks if the UUID is valid 16byte string

        Args:
            value (uuid.UUID): possible user's uuid

        Returns:
            uuid.UUID | ValueError: returns the same uuid or ValueError if it is wrong
        """
        try:
            return uuid.UUID(value)
        except ValueError:
            return False

    async def get_user_by_id(self, user_id: uuid.UUID) -> User | None:
        """
        Get a user by user id,
        the id is generated by uuid and works as unique indetifier for user.

        Args:
            username (str): The id of the user.

        Returns:
            User | None: The user object if found, None otherwise
        """
        user_id = self.validate_user_id(user_id)
        if user_id:
            user = await self.session.scalars(
                select(User).where(User.user_id == user_id)
            )
            return user.one_or_none()
        return None

    async def write_user(self, user: UserReg) -> User:
        """
        Write a user to the database.

        Args:
            user (UserReg): The user to write.

        Returns:
            User: The written user object.
        """
        hashed_password = await hash_password(user.password)
        user_obj = User(
            **user.model_dump(exclude={"password"}), password=hashed_password
        )
        self.session.add(user_obj)
        await self.session.commit()
        await self.session.refresh(user_obj)
        return user_obj

    async def check_if_user_exists(self, user_data: UserReg):
        """
        Check if the user already exists.

        Args:
            user_data (UserReg): The user data to check.

        Returns:
            bool: True if user exists, False otherwise.
        """
        user = await self.session.scalars(
            select(User).where(
                User.name == user_data.name, User.surname == user_data.surname
            )
        )
        return user.one_or_none()
